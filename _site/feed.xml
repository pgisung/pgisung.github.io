<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-05T21:58:57+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">JohnnyPark</title><subtitle>The growth diary of Software developer JohnnyPark</subtitle><entry><title type="html">Git 저장소 개념과 원리</title><link href="http://localhost:4000/github/2023/09/04/Git-repository-concept-and-principle/" rel="alternate" type="text/html" title="Git 저장소 개념과 원리" /><published>2023-09-04T14:11:27+09:00</published><updated>2023-09-04T14:11:27+09:00</updated><id>http://localhost:4000/github/2023/09/04/Git-repository-concept-and-principle</id><content type="html" xml:base="http://localhost:4000/github/2023/09/04/Git-repository-concept-and-principle/"><![CDATA[<blockquote>
  <ol>
    <li><a href="#git-저장소-생성하기" title="Navigate to Initializing Git repository">Git 저장소 생성하기</a>
<br /></li>
    <li><a href="#로컬-저장소-동작-원리" title="Navigate The principle of local repository">로컬 저장소 동작 원리</a>
<br /></li>
    <li><a href="#git-디렉토리를-파헤쳐보자" title="Navigate to Let's dig into the .git directory">.git 디렉토리를 파헤쳐보자</a></li>
  </ol>
</blockquote>

<hr />

<h4 id="git-저장소-생성하기"><span style="color: brown"><strong>Git 저장소 생성하기</strong></span></h4>
<ul>
  <li>평범한 디렉토리를 git 저장소로 둔갑시켜주는 마법의 명령어는 다음과 같다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div>    </div>
  </li>
</ul>

<hr />

<h4 id="로컬-저장소-동작-원리"><span style="color: brown"><strong>로컬 저장소 동작 원리</strong></span></h4>
<p><img src="/images/posts/2023-09-04-Git-repository-concept-and-principle/the-principle-of-local-repository.png" title="The principle of local git repository" alt="The principle of local git repository" /></p>

<hr />

<h4 id="git-디렉토리를-파헤쳐보자"><span style="color: brown"><strong>.git 디렉토리를 파헤쳐보자</strong></span></h4>

<hr />

<h4 id="마무리하며">마무리하며…</h4>]]></content><author><name></name></author><category term="Github" /><category term="Git" /><category term="Github" /><category term="Software Version Management" /><category term="깃" /><category term="깃허브" /><category term="버전관리" /><summary type="html"><![CDATA[Git 저장소를 생성하고 버전관리 동작 원리를 알아보자.]]></summary></entry><entry><title type="html">필수적인 터미널 명령어를 알아보자</title><link href="http://localhost:4000/github/2023/08/28/Essential-terminal-commands/" rel="alternate" type="text/html" title="필수적인 터미널 명령어를 알아보자" /><published>2023-08-28T10:47:23+09:00</published><updated>2023-08-28T10:47:23+09:00</updated><id>http://localhost:4000/github/2023/08/28/Essential-terminal-commands</id><content type="html" xml:base="http://localhost:4000/github/2023/08/28/Essential-terminal-commands/"><![CDATA[<blockquote>
  <ol>
    <li><a href="#cd-명령어" title="Navigate to cd command">cd 명령어</a>
<br /></li>
    <li><a href="#ls-명령어" title="Navigate to ls command">ls 명령어</a>
<br /></li>
    <li><a href="#pwd-명령어" title="Navigate to pwd command">pwd 명령어</a>
<br /></li>
    <li><a href="#mkdir-명령어" title="Navigate to mkdir command">mkdir 명령어</a>
<br /></li>
    <li><a href="#rmdir-명령어" title="Navigate to rmdir command">rmdir 명령어</a>
<br /></li>
    <li><a href="#touch-명령어" title="Navigate to touch command">touch 명령어</a>
<br /></li>
    <li><a href="#rm-명령어" title="Navigate to rm command">rm 명령어</a>
<br /></li>
    <li><a href="#mv-명령어" title="Navigate to mv command">mv 명령어</a>
<br /></li>
    <li><a href="#cp-명령어" title="Navigate to cp command">cp 명령어</a>
<br /></li>
    <li><a href="#echo-명령어" title="Navigate to echo command">echo 명령어</a>
<br /></li>
    <li><a href="#cat-명령어" title="Navigate to cat command">cat 명령어</a>
<br /></li>
    <li><a href="#less-명령어" title="Navigate to less command">less 명령어</a>
<br /></li>
    <li><a href="#find-명령어" title="Navigate to find command">find 명령어</a>
<br /></li>
    <li><a href="#터미널-제어-명령어" title="Navigate to the commands to control a terminal">터미널 제어 명령어</a>
<br /></li>
  </ol>
</blockquote>

<hr />

<h4 id="cd-명령어"><span style="color: brown"><strong>cd 명령어</strong></span></h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> &lt;디렉토리 경로&gt; : 입력한 디렉토리 경로로 이동
<span class="nb">cd</span> .. : 부모 디렉토리로 이동 <span class="o">(</span>한 단계 상위 디렉토리<span class="o">)</span>
<span class="nb">cd</span> : 경로를 입력하지 않으면 최상위 디렉토리로 이동
<span class="nb">cd</span> ~ : 최상위 디렉토리로 이동
</code></pre></div></div>
<ul>
  <li><span style="color: #8D4801"><strong>C</strong></span>hange <span style="color: #8D4801"><strong>D</strong></span>irectory의 약자로 작업할 디렉토리간 이동에 쓰이는 명령어이다. 매우 자주 쓰인다.</li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-28-Essential-terminal-commands/terminal-command-cd.jpg" title="Terminal command to change directory" alt="Terminal command to change directory" />
</div>

<hr />

<h4 id="ls-명령어"><span style="color: brown"><strong>ls 명령어</strong></span></h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> : 해당 경로 안 파일 및 디렉토리들의 리스트 출력
<span class="nb">ls</span> <span class="nt">-l</span> : 리스트 자세한 내용과 함께 출력 <span class="o">(</span>long<span class="o">)</span> // 크기, 수정 시간[mtime], 권한 및 소유권
<span class="nb">ls</span> <span class="nt">-a</span> : 숨겨진 파일 및 디렉토리들을 포함하여 리스트 출력 <span class="o">(</span>all<span class="o">)</span>
<span class="nb">ls</span> <span class="nt">-S</span> : 파일 크기순으로 정렬하여 리스트 출력 <span class="o">(</span>size<span class="o">)</span>
<span class="nb">ls</span> <span class="nt">-r</span> : 역순으로 출력, 기본값은 알파벳 순서이다. <span class="o">(</span>reverse<span class="o">)</span>
<span class="nb">ls</span> <span class="nt">-R</span> : 하위 디렉토리까지 출력 <span class="o">(</span>recursive<span class="o">)</span>
<span class="nb">ls</span> <span class="nt">-h</span> : 파일 크기 단위[k, m, g]를 표시하여 사람이 보기 좋게 출력 <span class="o">(</span>human<span class="o">)</span>
<span class="nb">ls</span> <span class="nt">-lu</span> : 자세한 내용에 수정 시간[mtime] 대신 접근 시간[atime]을 출력
<span class="nb">ls</span> <span class="nt">-lc</span> : 자세한 내용에 수정 시간[mtime] 대신 변경 시간[ctime]을 출력
</code></pre></div></div>
<ul>
  <li><span style="color: #8D4801"><strong>L</strong></span>i<span style="color: #8D4801"><strong>s</strong></span>t의 약자로 현재 디렉토리 안 파일 및 디렉토리들의 리스트를 보여주는 명령어이다. ls 명령어로 폴더 리스트를 확인하고 cd 명령어를 이용해 디렉토리를 이동하는 등 매우 자주 쓰인다.</li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-28-Essential-terminal-commands/terminal-command-ls-alh.jpg" title="Terminal command to show the list in the path" alt="Terminal command to show the list in the path" />
</div>

<hr />

<h4 id="pwd-명령어"><span style="color: brown"><strong>pwd 명령어</strong></span></h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">pwd</span> : 현재 디렉토리의 절대경로를 출력
</code></pre></div></div>
<ul>
  <li><span style="color: #8D4801"><strong>P</strong></span>rint <span style="color: #8D4801"><strong>W</strong></span>orking <span style="color: #8D4801"><strong>D</strong></span>irectory의 약자로 현재 디렉토리의 경로를 확인할 때 쓰인다.</li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-28-Essential-terminal-commands/terminal-command-pwd.jpg" title="Terminal command to print working directory" alt="Terminal command to print working directory" />
</div>

<hr />

<h4 id="mkdir-명령어"><span style="color: brown"><strong>mkdir 명령어</strong></span></h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> &lt;디렉토리명&gt; : 현재 경로에 새로운 디렉토리 생성
<span class="nb">mkdir</span> <span class="nt">-p</span> &lt;경로&gt;/&lt;디렉토리명&gt; : 특정 경로에 새로운 디렉토리 생성 <span class="o">(</span>경로상에 존재하지 않는 폴더명이 있으면 생성<span class="o">)</span>
<span class="nb">mkdir</span> <span class="nt">-m</span> &lt;rwx[예<span class="o">)</span> 755]&gt; &lt;디렉토리명&gt; : 현재 경로에 접근 권한이 수정된 새로운 디렉토리 생성
</code></pre></div></div>
<ul>
  <li><span style="color: #8D4801"><strong>M</strong></span>a<span style="color: #8D4801"><strong>k</strong></span>e <span style="color: #8D4801"><strong>Dir</strong></span>ectories의 약자로 현재 경로에 새로운 디렉토리들을 생성할 때 쓰인다.</li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-28-Essential-terminal-commands/terminal-command-mkdir.jpg" title="Terminal command to make new directories" alt="Terminal command to make new directories" />
</div>

<hr />

<h4 id="rmdir-명령어"><span style="color: brown"><strong>rmdir 명령어</strong></span></h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rmdir</span> &lt;디렉토리명&gt; : 현재 경로에 비어있는 디렉토리 삭제 <span class="o">(</span>디렉토리에 1개 이상의 파일 존재 시 삭제 불가능<span class="o">)</span>
</code></pre></div></div>
<ul>
  <li><span style="color: #8D4801"><strong>R</strong></span>e<span style="color: #8D4801"><strong>m</strong></span>ove <span style="color: #8D4801"><strong>Dir</strong></span>ectories의 약자로 현재 경로에 비어있는 디렉토리들을 삭제할 때 쓰인다.</li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-28-Essential-terminal-commands/terminal-command-rmdir.jpg" title="Terminal command to remove empty directories" alt="Terminal command to remove empty directories" />
</div>

<hr />

<h4 id="touch-명령어"><span style="color: brown"><strong>touch 명령어</strong></span></h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">touch</span> &lt;파일명&gt; : 현재 경로에 새로운 빈 파일 생성
<span class="nb">touch</span> <span class="nt">-a</span> &lt;파일명&gt; : 접근 시간[atime]을 현재 시각으로 변경
<span class="nb">touch</span> <span class="nt">-d</span> &lt;<span class="s1">'YYYY-MM-DD hh:mm:ss'</span><span class="o">&gt;</span> &lt;파일명&gt; : 접근 시간[atime]과 수정 시간[mtime]을 특정 시간으로 변경
<span class="nb">touch</span> <span class="nt">-t</span> &lt;CCYYMMDDhhmm.ss&gt; &lt;파일명&gt; : 접근 시간[atime]과 수정 시간[mtime]을 특정 시간으로 변경
</code></pre></div></div>
<ul>
  <li>‘만지다’라는 뜻을 가진 <span style="color: #8D4801"><strong>touch</strong></span>와 같이 어루만지듯이 파일에 접근 및 수정하고 빈 파일을 생성할 때 쓰인다.</li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-28-Essential-terminal-commands/terminal-command-touch.jpg" title="Terminal command to make new empty files" alt="Terminal command to make new empty files" />
</div>

<hr />

<h4 id="rm-명령어"><span style="color: brown"><strong>rm 명령어</strong></span></h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> &lt;디렉토리 또는 파일명&gt; : 현재 경로에 비어있지 않은 디렉토리 및 파일 삭제
<span class="nb">rm</span> <span class="nt">-r</span> &lt;디렉토리 또는 파일명&gt; : 현재 경로에 비어있지 않은 디렉토리 및 파일들과 그 하위 디렉토리 및 파일들을 모두 삭제 <span class="o">(</span>recursive<span class="o">)</span>
<span class="nb">rm</span> <span class="nt">-f</span> &lt;디렉토리 또는 파일명&gt; : 삭제 명령을 강제로 실행 <span class="o">(</span>force<span class="o">)</span>
</code></pre></div></div>
<ul>
  <li><span style="color: #8D4801"><strong>R</strong></span>e<span style="color: #8D4801"><strong>m</strong></span>ove의 약자로 현재 경로에 비어있지 않은 디렉토리 및 파일들을 삭제할 때 쓰인다.</li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-28-Essential-terminal-commands/terminal-command-rm.jpg" title="Terminal command to remove non-empty directories and files" alt="Terminal command to remove non-empty directories and files" />
</div>

<hr />

<h4 id="mv-명령어"><span style="color: brown"><strong>mv 명령어</strong></span></h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mv</span> &lt;디렉토리 또는 파일의 경로&gt; &lt;이동시킬 경로&gt; : 이동시킬 경로로 디렉토리 및 파일을 이동
<span class="nb">mv</span> &lt;디렉토리 또는 파일1&gt; &lt;디렉토리 또는 파일2&gt; ... &lt;이동시킬 경로&gt; : 복수의 디렉토리 및 파일을 이동
<span class="nb">mv</span> <span class="k">*</span> &lt;이동시킬 경로&gt; : 현재 경로의 모든 디렉토리 및 파일을 이동
</code></pre></div></div>
<ul>
  <li><span style="color: #8D4801"><strong>M</strong></span>o<span style="color: #8D4801"><strong>v</strong></span>e의 약자로 디렉토리 및 파일들의 경로를 이동할 때 쓰인다. 이동시킬 경로에 파일명을 다르게 입력할 경우 파일 이름을 변경할 수 있다.</li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-28-Essential-terminal-commands/terminal-command-mv.jpg" title="Terminal command to move directories and files" alt="Terminal command to move directories and files" />
</div>

<hr />

<h4 id="cp-명령어"><span style="color: brown"><strong>cp 명령어</strong></span></h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> &lt;디렉토리 또는 파일의 경로&gt; &lt;복사시킬 경로&gt; : 복사시킬 경로로 디렉토리 및 파일을 복사
<span class="nb">cp</span> <span class="nt">-r</span> &lt;디렉토리 또는 파일의 경로&gt; &lt;복사시킬 경로&gt; : 복사시킬 경로로 디렉토리 및 파일들과 그 하위 디렉토리 및 파일들을 모두 복사 <span class="o">(</span>recursive<span class="o">)</span>
<span class="nb">cp</span> <span class="nt">-f</span> &lt;디렉토리 또는 파일의 경로&gt; &lt;복사시킬 경로&gt; : 복사시킬 경로에 이미 같은 이름을 가진 디렉토리 또는 파일이 존재하더라도 복사 명령을 강제로 실행 <span class="o">(</span>force<span class="o">)</span>
</code></pre></div></div>
<ul>
  <li><span style="color: #8D4801"><strong>C</strong></span>o<span style="color: #8D4801"><strong>p</strong></span>y의 약자로 디렉토리 및 파일들을 복사할 때 쓰인다.</li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-28-Essential-terminal-commands/terminal-command-cp.jpg" title="Terminal command to copy directories and files" alt="Terminal command to copy directories and files" />
</div>

<hr />

<h4 id="echo-명령어"><span style="color: brown"><strong>echo 명령어</strong></span></h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> &lt;문자열&gt; : 문자열을 화면에 출력
<span class="nb">echo</span> &lt;<span class="s2">"특수문자를 포함한 문자열"</span><span class="o">&gt;</span> : 특수문자를 포함한 문자열은 큰따옴표를 사용하여 화면에 출력
<span class="nb">echo</span> &lt;<span class="s2">"문자열"</span><span class="o">&gt;</span> <span class="o">&gt;</span> &lt;파일명&gt; : 파일이 존재할 경우 문자열을 덮어쓰기로 저장 존재하지 않을 경우 파일 생성
<span class="nb">echo</span> &lt;<span class="s2">"문자열"</span><span class="o">&gt;</span> <span class="o">&gt;&gt;</span> &lt;파일명&gt; : 파일이 존재할 경우 문자열을 이어서 저장 존재하지 않을 경우 파일 생성
</code></pre></div></div>
<ul>
  <li>‘메아리’라는 뜻을 가진 <span style="color: #8D4801"><strong>echo</strong></span>와 같이 입력한 문자열을 화면에 똑같이 출력할 때 쓰인다. 옵션에 따라 출력 내용을 파일에 입력할 수 있다.</li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-28-Essential-terminal-commands/terminal-command-echo.jpg" title="Terminal command to print out the string" alt="Terminal command to print out the string" />
</div>

<hr />

<h4 id="cat-명령어"><span style="color: brown"><strong>cat 명령어</strong></span></h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> &lt;텍스트 파일명&gt; : 텍스트 파일 내 문자들을 화면에 출력
<span class="nb">cat</span> &lt;텍스트 파일명1&gt; &lt;텍스트 파일명2&gt; ... : 여러 개의 텍스트 파일 내 문자들을 순차적으로 모두 화면에 출력
<span class="nb">cat</span> <span class="nt">-n</span> &lt;텍스트 파일명&gt; : 텍스트 파일 내 문자들을 화면에 line number와 함께 출력
</code></pre></div></div>
<ul>
  <li>Con<span style="color: #8D4801"><strong>cat</strong></span>enate의 약자로 하나 이상의 텍스트 파일을 화면에 출력할 때 쓰인다.</li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-28-Essential-terminal-commands/terminal-command-cat.jpg" title="Terminal command to print out the files" alt="Terminal command to print out the files" />
</div>

<hr />

<h4 id="less-명령어"><span style="color: brown"><strong>less 명령어</strong></span></h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>less &lt;텍스트 파일명&gt; : 텍스트 파일 내 문자들을 터미널 화면에 가득 찰 정도로 일부만 화면에 출력하고 페이지처럼 위아래로 탐색 조회
</code></pre></div></div>
<ul>
  <li>‘적다’라는 뜻을 가진 <span style="color: #8D4801"><strong>less</strong></span>와 같이 텍스트 파일에서 터미널 화면에 가득 찰 정도로 일부만 출력하고 위아래로 탐색할 수 있게 하여 크기가 큰 텍스트 파일을 편리하게 조회할 때 쓰인다.</li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-28-Essential-terminal-commands/terminal-command-less.jpg" title="Terminal command to print out a large size file one screen at a time" alt="Terminal command to print out a large size file one screen at a time" />
</div>

<hr />

<h4 id="find-명령어"><span style="color: brown"><strong>find 명령어</strong></span></h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-name</span> &lt;<span class="s1">'디렉토리 또는 파일명'</span><span class="o">&gt;</span> : 현재 디렉토리부터 찾고자 하는 디렉토리 또는 파일 검색
find <span class="nb">.</span> <span class="nt">-name</span> &lt;<span class="s1">'파일명'</span><span class="o">&gt;</span> <span class="nt">-type</span> f : 현재 디렉토리부터 찾고자 하는 파일만 검색
find <span class="nb">.</span> <span class="nt">-name</span> &lt;<span class="s1">'디렉토리명'</span><span class="o">&gt;</span> <span class="nt">-type</span> d : 현재 디렉토리부터 찾고자 하는 디렉토리만 검색
find <span class="nb">.</span> <span class="nt">-name</span> &lt;<span class="s1">'심볼릭링크명'</span><span class="o">&gt;</span> <span class="nt">-type</span> l : 현재 디렉토리부터 찾고자 하는 심볼릭링크만 검색
find / <span class="nt">-name</span> &lt;<span class="s1">'디렉토리 또는 파일명'</span><span class="o">&gt;</span> : 최상위 디렉토리부터 찾고자 하는 디렉토리 또는 파일 검색
find / <span class="nt">-name</span> &lt;<span class="s1">'*.특정 확장자'</span><span class="o">&gt;</span> : 최상위 디렉토리부터 특정 확장자를 가진 모든 파일 검색
find / <span class="nt">-name</span> &lt;<span class="s1">'abc*'</span><span class="o">&gt;</span> : 최상위 디렉토리부터 파일명이 abc로 시작하는 모든 파일 검색
find / <span class="nt">-name</span> &lt;<span class="s1">'파일명'</span><span class="o">&gt;</span> <span class="nt">-exec</span> &lt;터미널 명령어&gt; <span class="o">{}</span> <span class="se">\;</span> : 최상위 디렉토리부터 찾고자 하는 파일 검색 후 해당 파일에 명령어 실행 <span class="o">(</span>각 파일 별도로 프로세스 실행<span class="o">)</span>
find / <span class="nt">-name</span> &lt;<span class="s1">'파일명'</span><span class="o">&gt;</span> <span class="nt">-exec</span> &lt;터미널 명령어&gt; <span class="o">{}</span> + : 최상위 디렉토리부터 찾고자 하는 파일 검색 후 해당 파일에 명령어 실행 <span class="o">(</span>전체적으로 한 번만 실행<span class="o">)</span>
</code></pre></div></div>
<ul>
  <li>‘찾는다’라는 뜻을 가진 <span style="color: #8D4801"><strong>find</strong></span>와 같이 파일 시스템에서 파일을 찾을 때 쓰인다. 옵션과 표현식에 따라 사용 방식이 다양하다.</li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-28-Essential-terminal-commands/terminal-command-find.jpg" title="Terminal command to search for files on file system" alt="Terminal command to search for files on file system" />
</div>

<hr />

<h4 id="터미널-제어-명령어"><span style="color: brown"><strong>터미널 제어 명령어</strong></span></h4>
<ul>
  <li><span style="color: #8D4801"><strong>clear 명령어</strong></span>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clear : 터미널의 내용을 모두 깔끔하게 지우는 명령어 <span class="o">(</span>iTerm2 기준으로 스크롤을 올리면 이전 내용을 볼 수 있음<span class="o">)</span>
</code></pre></div>    </div>
    <p><br /></p>
  </li>
  <li><span style="color: #8D4801"><strong>sudo 명령어</strong></span>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo</span> &lt;터미널 명령어&gt; : 최상위 권한으로 명령어를 실행함
</code></pre></div>    </div>
    <ul>
      <li><span style="color: #8D4801"><strong>S</strong></span>uper <span style="color: #8D4801"><strong>u</strong></span>ser <span style="color: #8D4801"><strong>do</strong></span>의 약자로 최상위 권한으로 명령어를 실행할 때 쓰인다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li><span style="color: #8D4801"><strong>특수문자 \ 사용</strong></span>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>&lt;터미널 명령어1&gt; <span class="se">\</span>
<span class="nv">$ </span>&lt;터미널 명령어1&gt; <span class="se">\</span>
<span class="nv">$ </span>&lt;터미널 명령어1&gt; : 명령어가 한 줄안에 다 못 쓸정도로 길어질 경우 <span class="se">\ </span>문자를 사용하여 다음 줄에 이어서 명령어를 작성할 수 있다.
</code></pre></div>    </div>
    <p><br /></p>
  </li>
  <li><span style="color: #8D4801"><strong>특수문자 ; 사용</strong></span>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>&lt;터미널 명령어1&gt;<span class="p">;</span> &lt;터미널 명령어2&gt;<span class="p">;</span> &lt;터미널 명령어3&gt; : 여러 명령어를 한 줄에 작성할 때 <span class="p">;</span> 문자를 사용하여 연결하면 순차적으로 명령어가 실행된다.
</code></pre></div>    </div>
  </li>
</ul>

<hr />

<h4 id="마무리하며">마무리하며…</h4>
<p>이번 포스트에서는 필수적인 터미널 명령어들을 알아보았다. 사실 Git을 처음 접하는 사람들이 대부분 이 터미널, 콘솔 환경에 대한 거부감 때문에 진입장벽이 생기는 것 같다. 그래서 설령 입문해도 터미널은 아예 배제하고 특정 GUI의 사용법만 익히는 등 터미널 자체를 익히지 않는 경우도 있다. 하지만, 아무리 GUI가 편리하고 꾸준히 기능들이 추가되고 있어도 여전히 터미널 환경이 아니면 해결하지 못하는 상황이 빈번하게 발생한다. CUI든 GUI든 누군가에게 강요해선 안 된다고 생각하지만, 어느 쪽을 메인으로 선택하든 개발자로서 Solution을 찾지 못하는 상황은 발생해서는 안 된다는 의견으로 결국 어느 쪽도 등한시할 수 없다고 생각한다. 다음 포스트 때는 Git의 개념과 원리에 대하여 함께 정리해 보는 시간을 가져보자.</p>]]></content><author><name></name></author><category term="Github" /><category term="Git" /><category term="Github" /><category term="Terminal commands" /><category term="터미널 명령어" /><summary type="html"><![CDATA[터미널 환경에서 Git을 사용하기 위해 필수적인 명령어에 무엇이 있는지 그리고 어떻게 사용하는지 알아보자.]]></summary></entry><entry><title type="html">Git을 시작해보자</title><link href="http://localhost:4000/github/2023/08/26/Getting-Started-with-Git/" rel="alternate" type="text/html" title="Git을 시작해보자" /><published>2023-08-26T15:29:33+09:00</published><updated>2023-08-26T15:29:33+09:00</updated><id>http://localhost:4000/github/2023/08/26/Getting-Started-with-Git</id><content type="html" xml:base="http://localhost:4000/github/2023/08/26/Getting-Started-with-Git/"><![CDATA[<blockquote>
  <ol>
    <li><a href="#windows-환경에서-git-설치-방법" title="Navigate to The way to install Git in Windows">Windows 환경에서 Git 설치 방법</a>
<br /></li>
    <li><a href="#mac-환경에서-git-설치-방법" title="Navigate to The way to install Git in Mac">Mac 환경에서 Git 설치 방법</a>
<br /></li>
    <li><a href="#git-입문하기" title="Navigate to Getting started with Git">Git 입문하기</a>
<br /></li>
    <li><a href="#git-환경설정" title="Navigate to Setting environment of Git">Git 환경설정</a></li>
  </ol>
</blockquote>

<hr />

<h4 id="windows-환경에서-git-설치-방법"><span style="color: brown"><strong>Windows 환경에서 Git 설치 방법</strong></span></h4>
<p>일단 Git을 시작하기 위해 설치해 보자.</p>
<ul>
  <li><strong>설치 파일 다운로드</strong>
<br />
먼저 Git 공식 웹사이트(<a href="https://git-scm.com" title="Navigate to Git official website">https://git-scm.com</a>)에 접속하여 Windows 용 설치파일을 다운받는다.</li>
</ul>

<div class="image-slider-auto">
  <img src="/images/posts/2023-08-26-Starting-Git/git-official-website-1.jpg" title="Git official website" alt="Git official website" />
  <img src="/images/posts/2023-08-26-Starting-Git/git-official-website-2.png" title="Download page in Git official website" alt="Download page in Git official website" />
</div>

<p><br /></p>

<ul>
  <li>
    <p><strong>설치</strong>
<br />
다음으로 다운받은 설치파일을 실행하여 설치를 진행한다. 아래는 간단한 설명을 붙인 설치 과정이다.</p>

    <ol>
      <li>
        <p>GNU 오픈 소스 라이선스 관련 약관이다. 동의한다면 Next를 누르고 진행한다.
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-1.png" title="Process to install Git on Windows" alt="Process to install Git on Windows" /></p>
      </li>
      <li>
        <p>Git이 설치될 경로이다. 원하는 경로가 따로 있다면 이곳에서 변경하면 된다. 보통은 default 경로로 진행한다.
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-2.png" title="Process to install Git on Windows" alt="Process to install Git on Windows" /></p>
      </li>
      <li>
        <p>이미 Git의 다양한 컴포넌트에 익숙하신 분들은 필요한 컴포넌트를 추가로 설치할 수 있다. 하지만 초심자는 그대로 Next를 누르고 진행한다.
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-3.png" title="Process to install Git on Windows" alt="Process to install Git on Windows" /></p>
      </li>
      <li>
        <p>Git 프로그램에 대한 시작메뉴 폴더명을 다르게 지정할 수 있으나 그대로 진행하는 것을 추천한다.
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-4.png" title="Process to install Git on Windows" alt="Process to install Git on Windows" /></p>
      </li>
      <li>
        <p>Git에서 텍스트를 이용한 작업이 필요할 때 사용할 편집기를 지정한다. 다른 외부 편집기를 사용하고 싶다면 직접 지정하고 아니면 기본값으로 두고 진행한다.
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-5.png" title="Process to install Git on Windows" alt="Process to install Git on Windows" /></p>
      </li>
      <li>
        <p><span style="color: #8D4801"><strong>새로운 워킹 디렉토리에 Git을 초기화할 때 default branch의 name을 Git에서 기본값으로 지정하는 명칭으로 할지 Custom할지 정하는 곳이다.</strong></span> 오래전 버전에선 해당 옵션이 존재하지 않아서 branch명이 자동으로 기본값으로 지정되던 시기가 있었는데, Git을 잘 모르던 시절에 인터넷 검색에 기대어 사용할 때 원격저장소의 브랜치명은 master로 되어있는데 main 브랜치에 push를 해서 동작이 안 되고 뭐가 문젠지 모르는 우스운 실수가 나왔었다. (지금은 웃지만… 당시엔 해결을 못해서 엄청난 스트레스였다…) 아무튼 어느 옵션을 선택하든 Git 명령어를 사용할 때 브랜치를 잘 확인하고 사용하자.
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-6.png" title="Process to install Git on Windows" alt="Process to install Git on Windows" /></p>
      </li>
      <li>Git bash 명령어를 실행할 수 있는 경로를 설정하는 화면으로 일반적으로 기본값으로 두고 진행하면 된다. 
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-7.png" title="Process to install Git on Windows" alt="Process to install Git on Windows" />
        <ul>
          <li><span style="color: #8D4801"><strong>Use Git from Git Bash only</strong></span>: 오직 Git bash로만 Git을 사용할 수 있다.</li>
          <li><span style="color: #8D4801"><strong>Git from the command line and also from 3rd-party software</strong></span>: 기본값으로써 Git bash뿐만 아니라 Windows cmd 창에서도 git 명령어를 사용할 수 있다.</li>
          <li><span style="color: #8D4801"><strong>Use Git and optional Unix tools from the Command Prompt</strong></span>: Windows cmd 창에서도 유닉스 도구 명령어를 사용할 수 있다.</li>
        </ul>
      </li>
      <li>
        <p>OpenSSH 패키지를 설치 유무를 선택할 수 있다. 기본값으로 두고 진행한다.
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-8.png" title="Process to install Git on Windows" alt="Process to install Git on Windows" /></p>
      </li>
      <li>
        <p>서버 간 코드 이력 전송에 관련된 옵션이다. 기본값으로 두고 진행한다.
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-9.png" title="Process to install Git on Windows" alt="Process to install Git on Windows" /></p>
      </li>
      <li>
        <p>엔딩 라인 처리방식 옵션이다. 기본값으로 두고 진행한다.
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-10.png" title="Process to install Git on Windows" alt="Process to install Git on Windows" /></p>
      </li>
      <li>
        <p>터미널 에뮬레이터 선택 옵션이다. 기본값으로 두고 진행한다.
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-11.png" title="Process to install Git on Windows" alt="Process to install Git on Windows" /></p>
      </li>
      <li>pull 명령어가 성공적으로 실행될 수도 있지만 이력 간 충돌로 인해 오류가 생길 수 있다. 이 상황에 대한 동작을 선택할 수 있다.
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-12.png" title="Process to install Git on Windows" alt="Process to install Git on Windows" />
        <ul>
          <li><span style="color: #8D4801"><strong>Fast-forward or merge</strong></span>: 브랜치가 생성된 커밋에 따라 순차적으로 분기하는 Fast-forward 방식으로 먼저 병합을 진행하고 동작이 불가능할 경우엔 수동 merge 진행</li>
          <li><span style="color: #8D4801"><strong>Rebase</strong></span>: 공통 조상 커밋인 base 커밋을 이동시키고 각 커밋들을 순차적으로 줄 세우고 동작이 불가능할 경우엔 실패할 수 있음</li>
          <li><span style="color: #8D4801"><strong>Only ever fast-forward</strong></span>: 브랜치가 생성된 커밋에 따라 순차적으로 분기하는 Fast-forward 방식으로 무조건 병합을 진행. 동작이 불가능할 경우엔 실패할 수 있음</li>
        </ul>
      </li>
      <li>
        <p>Git 사용 중 자격증명 관리자 추가 여부 기본값으로 두고 진행한다.
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-13.png" title="Process to install Git on Windows" alt="Process to install Git on Windows" /></p>
      </li>
      <li>
        <p>파일시스템 캐싱, symbolic link 사용 유무이다. 잘 모른다면 기본값으로 두고 진행한다.
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-14.png" title="Process to install Git on Windows" alt="Process to install Git on Windows" /></p>
      </li>
      <li>
        <p>추가옵션들로써 잘 모른다면 기본값으로 두고 진행한다.
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-15.png" title="Process to install Git on Windows" alt="Process to install Git on Windows" /></p>
      </li>
      <li>드디어 Git 설치 완료
<img src="/images/posts/2023-08-26-Starting-Git/git-setup-completed.png" title="Process to install Git on Windows" alt="The scene when Git installing completed on Windows" /></li>
    </ol>
  </li>
</ul>

<p><br /></p>

<ul>
  <li><strong>설치 확인</strong>
<br />
정상적으로 설치가 완료되었는지 확인을 해보자. 시작메뉴에 Git Bash를 포함한 프로그램들이 설치되었음을 확인할 수 있다. 이제 Git을 시작할 준비가 되었다.</li>
</ul>

<div class="image-slider-static">
  <img src="/images/posts/2023-08-26-Starting-Git/checking-successful-install.jpg" title="Checking successful install" alt="Checking successful install" />
</div>

<hr />

<h4 id="mac-환경에서-git-설치-방법"><span style="color: brown"><strong>Mac 환경에서 Git 설치 방법</strong></span></h4>

<ul>
  <li><strong>Homebrew 설치</strong>
<br />
이미 Homebrew가 설치되어 있다면 이 과정을 생략한다.
<br />
<br />
    <ul>
      <li>
        <p>먼저 MacOs용 패키지 관리 앱 Homebrew 공식 웹사이트(<a href="https://brew.sh" title="Navigate to Homebrew official website">https://brew.sh</a>)에 접속하면 확인할 수 있는 설치 명령어를 버튼을 눌러 복사한다.
<img src="/images/posts/2023-08-26-Starting-Git/homebrew-official-website.jpg" title="Homebrew official website" alt="Homebrew official website" />
<br /></p>
      </li>
      <li>터미널 또는 iTerm2를 실행하고 복사한 명령어를 붙여넣기해서 실행하면 설치가 진행된다. (추가로 노트북 계정 비밀번호 입력이 필요할 수 있다.)
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div>        </div>
        <p><img src="/images/posts/2023-08-26-Starting-Git/terminal-command-to-install-homebrew.jpg" title="Terminal command to install Homebrew" alt="Terminal command to install Homebrew" /></p>
      </li>
      <li>아래의 명령어를 실행하여 Homebrew가 정상적으로 설치되었는지 확인할 수 있다.
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nt">--version</span>
</code></pre></div>        </div>
        <p><img src="/images/posts/2023-08-26-Starting-Git/brew-command-version.jpg" title="Homebrew command to check the version of itself" alt="Homebrew command to check the version of itself" /></p>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>
    <p><strong>Git 설치</strong>
<br />
MacOs에서의 Git 설치는 Windows와 비교했을 때 매우 간단하다.</p>

    <ul>
      <li>아래의 명령어를 실행하면 설치가 진행된다.
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>git
</code></pre></div>        </div>
        <p><img src="/images/posts/2023-08-26-Starting-Git/brew-command-install-git.jpg" title="Homebrew command to install Git" alt="Homebrew command to install Git" /></p>
      </li>
      <li>아래의 명령어를 실행하여 Git이 정상적으로 설치되었는지 확인할 수 있다. 이 명령어는 설치된 Git의 버전 정보를 출력해 준다.
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git <span class="nt">--version</span>
</code></pre></div>        </div>
        <p><img src="/images/posts/2023-08-26-Starting-Git/git-command-version.jpg" title="Git command to check the version of itself" alt="Git command to check the version of itself" /></p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h4 id="git-입문하기"><span style="color: brown"><strong>Git 입문하기</strong></span></h4>
<p>자 이제 설치는 끝났고 본격적으로 Git을 시작해 보자.</p>

<ul>
  <li>Git의 기본적인 명령 구조는 다음과 같다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git &lt;명령어&gt; &lt;옵션&gt;
</code></pre></div>    </div>
  </li>
  <li>기본적인 명령어의 종류는 아래의 명령을 실행하여 확인할 수 있다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git <span class="nt">--help</span>
</code></pre></div>    </div>
  </li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-26-Starting-Git/git-command-help.jpg" title="Git command to check the significant commands in itself" alt="Git command to check the significant commands in itself" />
</div>

<ul>
  <li>
    <p>명령어 사용 시 옵션의 종류는 다음과 같다.</p>

    <ul>
      <li><span style="color: #8D4801"><strong>생략된 옵션</strong></span></li>
      <li><span style="color: #8D4801"><strong>’-‘ : 짧은 옵션</strong></span></li>
      <li><span style="color: #8D4801"><strong>’- -‘ : 긴 옵션</strong></span></li>
      <li>명령어별 사용할 수 있는 옵션의 종류는 아래의 명령을 실행하여 확인할 수 있다.
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git &lt;명령어&gt; <span class="nt">--help</span>
또는
git &lt;명령어&gt; <span class="nt">--help-option</span>
</code></pre></div>        </div>
      </li>
      <li>다음은 add 명령어의 옵션을 확인한 예시이다.</li>
    </ul>
  </li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-26-Starting-Git/git-command-add-help-option.jpg" title="Git command to check the options of add command" alt="Git command to check the options of add command" />
</div>

<ul>
  <li>또한 명령어 사용 시 <span style="color: #8D4801"><strong>세미콜론(;)</strong></span>을 이용하여 여러 개의 명령어를 한 줄에 사용이 가능하다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add .<span class="p">;</span> git commit <span class="nt">-m</span> <span class="s2">"[Chore] learning git"</span><span class="p">;</span> git push origin main
</code></pre></div>    </div>
  </li>
</ul>

<hr />

<h4 id="git-환경설정"><span style="color: brown"><strong>Git 환경설정</strong></span></h4>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config &lt;설정변수&gt; &lt;<span class="s2">"설정값"</span><span class="o">&gt;</span>
</code></pre></div></div>
<ul>
  <li>config 명령어를 <span style="color: #8D4801"><strong>처음 실행하면 새로운 config 파일을 생성</strong></span>한다. 만약 이전에 설정한 <span style="color: #8D4801"><strong>환경파일이 있다면 기존 파일을 수정</strong></span>한다.
    <ul>
      <li>config 파일은 <span style="color: #8D4801"><strong>.git 폴더 안에 생성</strong></span>된다.</li>
      <li>항목 이름이 .으로 시작하는 항목들은 운영체제의 구분 없이 <span style="color: #8D4801"><strong>숨겨져 있다.</strong></span></li>
      <li><span style="color: #8D4801"><strong>Windows</strong></span>의 경우 메뉴 &gt; 보기 &gt; 숨긴 항목 보기에 체크하면 확인할 수 있다.</li>
      <li><span style="color: #8D4801"><strong>Mac</strong></span>의 경우 command+shift+. 단축키를 사용하여 숨겨진 항목들이 보이게 할 수 있다.</li>
      <li>.git 폴더는 <span style="color: #8D4801"><strong>git init</strong></span> 명령어를 통해 실행 당시 경로 안에 만들어진다. <span style="color: #8D4801"><strong>즉, config 파일에 설정한 설정값은 지역적으로 해당 경로 안 저장소에서만 적용된다.</strong></span></li>
    </ul>
  </li>
</ul>
<div class="image-slider-auto">
  <img src="/images/posts/2023-08-26-Starting-Git/location-of-local-git-directory.jpg" title="Location of local git directory" alt="Location of local git directory" />
  <img src="/images/posts/2023-08-26-Starting-Git/location-of-local-git-config-file.jpg" title="Location of local git config file" alt="Location of local git config file" />
</div>
<p><br /></p>

<ul>
  <li>새로운 설정변수를 <span style="color: #8D4801"><strong>추가</strong></span>하기 위해서 add 옵션을 사용한다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--add</span> &lt;새로운 설정변수&gt; &lt;<span class="s2">"설정값"</span><span class="o">&gt;</span>
</code></pre></div>    </div>
    <ul>
      <li>
        <p>설정변수가 잘 추가되었는지 확인하기 위해서 추가하기 전에 설정값 목록을 먼저 확인해 보았다.
<img src="/images/posts/2023-08-26-Starting-Git/git-command-config-list-before-add.jpg" title="The list of values of git config file" alt="The list of values of git config file" /></p>
      </li>
      <li>
        <p>명령어를 add 옵션과 함께 실행한다.
<img src="/images/posts/2023-08-26-Starting-Git/git-command-config-add.jpg" title="Git command to add variable and value into config file" alt="Git command to add variable and value into config file" /></p>
      </li>
      <li>
        <p>새로운 변수와 값이 잘 추가되었음을 확인할 수 있다.
<img src="/images/posts/2023-08-26-Starting-Git/git-command-config-list-after-add.jpg" title="The list of values of git config file" alt="The list of values of git config file" /></p>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>기존에 설정되어 있던 특정 설정변수를 <span style="color: #8D4801"><strong>삭제</strong></span>하기 위해서 unset 옵션을 사용한다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--unset</span> &lt;설정변수&gt;
</code></pre></div>    </div>
    <ul>
      <li>위의 실습에서 추가한 변수를 삭제해 보자.
<img src="/images/posts/2023-08-26-Starting-Git/git-command-config-unset.jpg" title="Git command to remove variable and value in config file" alt="Git command to remove variable and value into config file" /></li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>설정값에 대한 수정이 제대로 완료되었는지 <span style="color: #8D4801"><strong>리스트로 확인</strong></span>해 볼 수 있다. 전체 설정값이 목록으로 표시된다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--list</span>
</code></pre></div>    </div>
    <ul>
      <li>위에서 삭제한 변수가 잘 삭제되었는지 확인해 보자.
<img src="/images/posts/2023-08-26-Starting-Git/git-command-config-list-after-unset.jpg" title="The list of values of git config file" alt="The list of values of git config file" /></li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li><span style="color: #8D4801"><strong>사용자 등록</strong></span>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config user.name &lt;<span class="s2">"사용자 이름"</span><span class="o">&gt;</span>
git config user.email &lt;<span class="s2">"사용자 이메일"</span><span class="o">&gt;</span>
</code></pre></div>    </div>
    <ul>
      <li>.git 폴더 안 config 파일에 사용자 정보가 저장되고 해당 경로 안 저장소에서 작업 시 이 사용자 정보를 사용한다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li><span style="color: #8D4801"><strong>전역</strong></span> 환경설정 옵션
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> &lt;설정변수&gt; &lt;<span class="s2">"설정값"</span><span class="o">&gt;</span>
</code></pre></div>    </div>
    <ul>
      <li><span style="color: #8D4801"><strong>모든 git 작업영역에 대한 환경설정</strong></span>을 할 수 있는 명령어이다.</li>
      <li>이 명령어는 <span style="color: #8D4801"><strong>최상위 User 폴더 안 .gitconfig 파일에 값을 저장</strong></span>한다.</li>
    </ul>
  </li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-26-Starting-Git/location-of-global-git-config-file.jpg" title="Location of global git config file" alt="Location of global git config file" />
</div>
<p><br /></p>

<ul>
  <li>전역 사용자 등록
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> user.name &lt;<span class="s2">"사용자 이름"</span><span class="o">&gt;</span>
git config <span class="nt">--global</span> user.email &lt;<span class="s2">"사용자 이메일"</span><span class="o">&gt;</span>
</code></pre></div>    </div>
    <ul>
      <li>최상위 User 폴더 안 .gitconfig 파일에 사용자 정보가 저장되고 모든 git 작업영역에서 작업 시 이 사용자 정보를 사용한다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li><span style="color: #8D4801"><strong>commit 템플릿 설정</strong></span>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> commit.template &lt;템플릿 파일 경로&gt;
</code></pre></div>    </div>
    <ul>
      <li>커밋메시지 템플릿을 변경하는 명령어이다. 커밋메시지 템플릿이란 git commit 명령어 실행 시 <span style="color: #8D4801"><strong>커밋메시지 작성 화면에 특정 양식을 작성</strong></span>해둔 파일이다.</li>
    </ul>
  </li>
</ul>
<div class="image-slider-static">
  <img src="/images/posts/2023-08-26-Starting-Git/git-commit-template.jpg" title="Git commit template" alt="Git commit template" />
</div>
<p><br /></p>

<ul>
  <li>Git이 자동으로 <span style="color: #8D4801"><strong>색상 출력을 사용</strong></span>하도록 설정한다. 이 값은 터미널이 색상 출력을 지원하는 경우에만 색상을 사용할 수 있다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> color.ui auto
</code></pre></div>    </div>
    <p><br /></p>
  </li>
  <li><span style="color: #8D4801"><strong>자격 증명을 캐시</strong></span>하는 데 사용되는 도구를 설정한다. 사용자가 반복적인 로그인을 피할 수 있도록 도와준다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> credential.helper cache
git config <span class="nt">--global</span> credential.helper <span class="s2">"cache --timeout=3600"</span> : timeout의 단위는 초 단위이다. 보안을 위해 캐시 보관기간을 추가로 입력할 수 있다. 기본값은 15분이다.
</code></pre></div>    </div>
    <p><br /></p>
  </li>
  <li>git pull 명령을 실행할 때 rebase를 사용하지 않고 바로 merge를 수행하도록 지정한다. <strong>위의 Windows 환경에서 Git 설치 과정 중 12번 과정과 같다.</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> pull.rebase <span class="nb">false</span>
</code></pre></div>    </div>
    <p><br /></p>
  </li>
  <li>git 저장소를 초기화할 때 브랜치의 기본명칭을 설정할 수 있다. (기본값은 master이다.) <strong>위의 Windows 환경에서 Git 설치 과정 중 6번 과정과 같다.</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> init.defaultBranch &lt;원하는 브랜치명 기본값&gt;
</code></pre></div>    </div>
    <p><br /></p>
  </li>
  <li><span style="color: #8D4801"><strong>명령어 alias</strong></span> (단축 명령어)
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> &lt;alias.원하는명령어&gt; &lt;<span class="s2">"명령어 옵션1 옵션2 ..."</span><span class="o">&gt;</span>
</code></pre></div>    </div>
    <ul>
      <li>자주 쓰이는 긴 명령어 및 옵션을 <span style="color: #8D4801"><strong>원하는 명령어로 설정</strong></span>해두고 설정한 명령어로 git의 기능을 사용할 수 있다.</li>
    </ul>
  </li>
</ul>

<hr />

<h4 id="마무리하며">마무리하며…</h4>
<p>이번 포스트에는 함께 Git을 설치해 보고 어떤 명령어들과 옵션들이 존재하는지 확인해 보았다. 또한 간단한 환경설정을 함께 진행해 보았으며 로컬과 전역 환경설정의 차이점에 대해서 알아보았다. 다음 포스트 때는 터미널 환경에서 Git 사용 시 필수적인 터미널 명령어들에 대해서 알아보자.</p>]]></content><author><name></name></author><category term="Github" /><category term="Git" /><category term="Github" /><category term="Software Version Management" /><category term="깃" /><category term="깃허브" /><category term="버전관리" /><category term="Git 설치" /><category term="Git 환경설정" /><summary type="html"><![CDATA[Windows / Mac 환경에서 Git 설치 및 환경설정을 해보자.]]></summary></entry><entry><title type="html">Git이란 무엇일까?</title><link href="http://localhost:4000/github/2023/08/19/An-introduction-to-the-principles-of-Git/" rel="alternate" type="text/html" title="Git이란 무엇일까?" /><published>2023-08-19T12:13:12+09:00</published><updated>2023-08-19T12:13:12+09:00</updated><id>http://localhost:4000/github/2023/08/19/An-introduction-to-the-principles-of-Git</id><content type="html" xml:base="http://localhost:4000/github/2023/08/19/An-introduction-to-the-principles-of-Git/"><![CDATA[<blockquote>
  <ol>
    <li><a href="#git의-어원은-무엇일까" title="Navigate to original meaning of Git">Git의 어원은 무엇일까?</a>
<br /></li>
    <li><a href="#버전관리란-무엇일까" title="Navigate to Version management">버전관리란 무엇일까?</a>
<br /></li>
    <li><a href="#중앙집중형-버전관리와-분산형-버전관리의-차이점" title="Navigate to The difference between Centralized and Distributed version management">중앙집중형 버전관리와 분산형 버전관리의 차이점</a></li>
  </ol>
</blockquote>

<hr />

<h4 id="git의-어원은-무엇일까"><span style="color: brown"><strong>Git의 어원은 무엇일까?</strong></span></h4>
<p>글을 시작하기에 앞서 가장 먼저 궁금했던 질문이었다. SVN이 SubVersioN의 약자이듯이 버전관리와 관련된 영어의 약자라고만 막연히 생각했다 그러나, Linux와 Git의 창시자인 <span style="color: #8D4801"><strong>Linus Torvalds가 말하길 Linux의 이름을 내 이름과 똑같다는 이유로 정했듯이 Git의 명칭 또한 “모든 프로젝트에 자신의 이름을 명명하는 이기주의자”라는 의미로 사용했다고 한다.</strong></span> 여기서 Git은 본래 영국에서 사용되는 속어로 “고집이 센 사람”, “이기적인 사람” 등의 부정적인 의미를 가진 단어이다.</p>

<div class="image-slider-static">
  <img src="/images/posts/2023-08-19-An-introduction-to-the-principles-of-Git/statistics-what-is-the-hardest-thing-for-developer.jpg" title="The statistics what is the hardest thing for developer" alt="The statistics what is the hardest thing for developer" />
</div>
<p><br />
세계적인 개발자도 이름 짓기의 어려움에선 예외가 없었나 보다…</p>

<hr />

<h4 id="버전관리란-무엇일까"><span style="color: brown"><strong>버전관리란 무엇일까?</strong></span></h4>
<p>그럼, 개인적인 궁금증은 해결되었고 그래서 Git은 무엇일까? <span style="color: #8D4801"><strong>Git은 대표적인 분산형 버전관리 시스템이다.</strong></span> 그렇다면 버전관리란 대체 무엇일까? 사실 데스크톱이든 태블릿이든 가정마다 컴퓨터 하나씩은 대부분 갖고 있는 지금 세대의 우리는 이미 버전관리를 경험해 봤을 가능성이 높다.</p>

<div class="image-slider-static">
  <img src="/images/posts/2023-08-19-An-introduction-to-the-principles-of-Git/version-management-example.jpg" title="Version management example" alt="Version management example" />
</div>
<p><br />
가령 대학 시절 팀 발표 과제를 받았을 때 누군가가 발표 자료를 수정할 때마다 수정 이전의 발표 자료와 구분하기 위해 파일명을 다르게 저장했던 행위도 버전관리의 일종이다. 하지만 위의 사진과 같이 파일이름을 정하는 사람도 저장되는 시각도 모두 제각각이다 보니 어떤 파일이 진짜 최종적으로 모든 History를 포함하고 있는 파일인지 구분하기가 무척 어렵다. 이때 사용하는 것이 바로 버전관리 시스템이다. 파일 버전을 좀 더 편리하고 정확하게 관리할 수 있게 도와주는 소프트웨어를 뜻한다. 그럼, 분산형 버전관리는 무엇을 뜻할까? 그리고 다른 버전관리와 어떤 차이점이 있을까?</p>

<hr />

<h4 id="중앙집중형-버전관리와-분산형-버전관리의-차이점"><span style="color: brown"><strong>중앙집중형 버전관리와 분산형 버전관리의 차이점</strong></span></h4>
<p>대표적인 분산형 버전관리 시스템이 Git이라면 그 반대에는 SVN이라는 중앙집중형 버전관리 시스템이 있다. 다음의 테이블을 참고하여 그 특징과 차이점에 대해서 알아보자.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">SVN</th>
      <th style="text-align: center">Git</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">하나의 Repository에 여러 프로젝트를 구성</td>
      <td style="text-align: center">보통 하나의 Repository에 하나의 프로젝트 구성</td>
    </tr>
    <tr>
      <td style="text-align: center">중앙집중형 (Centralized)</td>
      <td style="text-align: center">분산형 (Distributed)</td>
    </tr>
    <tr>
      <td style="text-align: center">각각의 개발자가 자신만의 Version history를 가질 수 없음</td>
      <td style="text-align: center">각각의 개발자가 자신만의 Version history를 가지고 있을 뿐만 아니라 개발자와 서버의 저장소는 독립적으로 관리할 수 있음</td>
    </tr>
    <tr>
      <td style="text-align: center">commit의 의미가 실제 기능 구현의 완료 및 공개를 의미 (commit을 하는 순간 협업하는 다른 모든 개발자에게 영향을 주기 때문에)</td>
      <td style="text-align: center">commit이 단순히 개발 이력이 이전 버전과 다르게 수정되었음을 의미 (push를 통해 서버에 적용하기 전까진 공개되지도 않고 다른 개발자들에게 영향을 주지도 않음)</td>
    </tr>
    <tr>
      <td style="text-align: center">디렉토리 / 파일별 권한 부여 가능</td>
      <td style="text-align: center">개별 권한 부여 불가</td>
    </tr>
    <tr>
      <td style="text-align: center">Revision을 이용한 버전관리 (클라이언트가 Repository에 새로운 수정을 commit 할 때마다 Revision 번호를 증가시켜 관리)</td>
      <td style="text-align: center">Object Hash를 이용한 버전관리 (SHA1이라는 해시알고리즘을 이용하여 각각의 커밋에 중복되지 않는 고유의 커밋 아이디를 부여하여 관리)</td>
    </tr>
    <tr>
      <td style="text-align: center">사용이 쉬운 편 (비교적 적은 종류의 명령, 자유도가 낮음)</td>
      <td style="text-align: center">사용법에 대한 Learning curve가 존재 (진입장벽이 존재)</td>
    </tr>
  </tbody>
</table>

<hr />

<h4 id="마무리하며">마무리하며…</h4>
<p>간단하게 Git에 대한 정의를 알아보았다. 근래에 개발자로서 업무를 진행하기 위해서는 Git을 빼놓고 얘기할 수 없다고 해도 과언이 아니다. 그런 의미에서 단순히 명령어만 암기할 게 아니라 Git이 개발자에게 왜 중요한지 생겨난 배경과 과정을 꼭 한번 짚고 넘어갈 필요성이 있다고 생각한다. 다음 포스트 때는 본격적으로 함께 Git을 시작해 보자!</p>]]></content><author><name></name></author><category term="Github" /><category term="Git" /><category term="Github" /><category term="Software Version Management" /><category term="깃" /><category term="깃허브" /><category term="버전관리" /><summary type="html"><![CDATA[Git에 입문하기 전에 기본적인 Git의 어원과 정의 그리고 버전관리에 대하여 알아보자.]]></summary></entry><entry><title type="html">좌충우돌 첫 블로그 제작기</title><link href="http://localhost:4000/daily/2023/08/06/The-first-blog-production-session/" rel="alternate" type="text/html" title="좌충우돌 첫 블로그 제작기" /><published>2023-08-06T20:55:01+09:00</published><updated>2023-08-06T20:55:01+09:00</updated><id>http://localhost:4000/daily/2023/08/06/The-first-blog-production-session</id><content type="html" xml:base="http://localhost:4000/daily/2023/08/06/The-first-blog-production-session/"><![CDATA[<p>문득, 지금 떠오르는 감정을 뭐라고 표현해야 할지 잘 모르겠다.<br />
언제고 <span style="color: #8D4801"><strong>나만의 공간</strong></span>을 온라인상에서 갖고 싶었는데 지금까지는 막연하게 생각만 하고
실행은 안 해오던 일상이었다. 무엇이 계기가 되었던 걸까?</p>

<hr />

<p>이번에는 무언가가 달랐다. <span style="color: #8D4801"><strong>첫 번째 동기부여</strong></span>는 아마 앱 스쿨 오리엔테이션 진행 중 간략하게 약 3시간여 들었던 HTML, CSS 기본기 강의였던 것 같다. 간단한 이력서 형식을 스스로 만들어 보면서 너무 쉽고 재미있더라고 느껴졌다. 무엇보다 <span style="color: #8D4801"><strong>HTML 작성은 개발이 아니라 문서작성</strong></span>이라는 말이 가슴에 와닿았다. 그럼, 이전에는 왜 웹사이트 작성이라는 것에 대해서 막연한 두려움을 갖고 있었을까?</p>

<div class="image-slider-static">
  <img src="/images/posts/2023-08-06-The-first-blog-production-session/like-lion-app-school-resume.png" title="Code Lion resume." alt="Code Lion resume." />
</div>

<center>
  <a href="https://www.codelion.net/catalog/Q291cnNlTm9kZToydzUy" title="Navigate to CODE LION">
    <small><i class="fa fa-copyright" aria-hidden="true"></i> CODE LION</small>
  </a>
</center>
<p><br /></p>

<ul>
  <li>아주 어린 시절 초등학생 때였나? <span style="color: #8D4801"><strong>나모 웹 에디터</strong></span>라는 수업을 들었던 기억이 드문드문 생각난다. 당시 나이의 나에겐 무슨 외계어를 보는 듯한 기분도 들었었고 차후에 내가 어떤 사람이 될지 아무 생각도 없던 시기였던 것 같다. 아무튼 <span style="color: #8D4801"><strong>당시의 두려움</strong></span>이 성인 이후로도 이어졌던 것 같다. 당시 수업 이래로 약 20년간 웹 개발언어를 다루기는커녕 본적조차 없었으니까…</li>
</ul>

<div class="image-slider-static">
  <img src="/images/posts/2023-08-06-The-first-blog-production-session/namo-web-editor.jpg" title="The book for Namo web editor." alt="The book for Namo web editor." />
</div>

<center>
  <a href="https://www.yes24.com/Product/Goods/65069480" title="Navigate to YES 24">
    <small><i class="fa fa-copyright" aria-hidden="true"></i> YES 24</small>
  </a>
</center>
<p><br /></p>

<ul>
  <li>최근 몇 달 전에 일을 그만두기 전까지 C# 프로그래밍 <span style="color: #8D4801"><strong>개발자로서 업무를 진행한 경험</strong></span>이 개발학습에 대한 인식이나 마음가짐에 영향을 많이 준 것 같다. 처음 대학에서 C, C++, C#, JAVA, Android, SQL 등등의 개발 문법을 <span style="color: #8D4801"><strong>학습할 당시에는</strong></span> 하나의 제품을 만들어 내는 것이 목적이 아니라 컴퓨터 과학적인 이론이나 언어들에 대한 학술적인 접근이 대부분이었기 때문에 졸업 이후에 내가 무엇을 하는 사람이 될 수 있을지 <span style="color: #8D4801"><strong>명확한 청사진이 떠오르지 않았었다</strong></span>. 하지만, 한번 개발자로서 온전한 소프트웨어 제품을 제작해 본 이후로부터 개발에 대한 자신감도 생기고 구체적으로 내가 어떤 학습을 통해서 어떤 기술을 갖게 되고 그것이 어떻게 비즈니스적으로 연결되는지 어느 정도 청사진이 머릿속에 그려지면서 무언가를 만들어 낸다는 것에 대한 <span style="color: #8D4801"><strong>망설임이 많이 사라진</strong></span> 것 같다.</li>
</ul>

<hr />

<p><span style="color: #8D4801"><strong>두 번째 계기</strong></span>는 6월 중에 Inflearn에서 구매해서 들은 반응형 웹사이트 강의이다. 상기된 첫 번째 동기부여의 힘을 받아 한번 그럴싸한 웹사이트를 직접 만들어 보고 싶다는 욕심이 생겨서 망설임 없이 강의를 구매했다. 가장 중요시했던 것은 역시 반드시 복사, 붙여넣기 없이 모든 코드를 직접 타이핑하는 것이었고 완강하기까지 약 2주 정도의 시간이 들어갔다. 그렇게 나의 <span style="color: #8D4801"><strong>첫 번째 웹사이트를 완성</strong></span>하고 나니 뭔가 만들어 낼 수 있다는 자신감이 차올라서 바로 나의 블로그를 만들…! 줄 알았는데…</p>

<div class="image-slider-static">
  <img src="/images/posts/2023-08-06-The-first-blog-production-session/inflearn-responsive-web-site-lecture.png" title="The lecture to learn how to build responsive web site." alt="The lecture to learn how to build responsive web site." />
</div>

<center>
  <a href="https://www.inflearn.com/course/반응형-웹사이트-포트폴리오-웹퍼블리싱" title="Navigate to Coding Works">
    <small><i class="fa fa-copyright" aria-hidden="true"></i> Coding Works</small>
  </a>
</center>
<p><br /></p>

<hr />

<p>한 달이 지나버렸다… (뭔가 그때는 Swift 공부하느라 바빴다는 핑계….) <span style="color: #8D4801"><strong>마지막 원동력</strong></span>은 7월 20일에 1차 이력서 피드백 특강 때였다. Legacy한 윈도우 한글로만 여전히 이력서를 작성해 봤던 나는 ‘이력서 좀 잘 쓰고 싶다’는 욕심이 있었기 때문에 한 달 전 강의에서 배웠던 작성법을 기반으로 가능한 한 열심히 이력서 작성에 임하고 피드백을 받았다. 그리고 이때 받은 피드백 중 가장 중점적으로 수정, 보완해야 할 부분은 작성한 경험을 뒷받침할 만한 내용들에 대한 링크와 Github, 블로그였고 이는 나의 블로그를 향한 집념에 다시 한번 불씨를 지폈다. 그로부터 약 3주간 집중해서 <span style="color: #8D4801"><strong>현재의 블로그가 탄생</strong></span>했다.</p>

<div class="image-slider-static">
  <img src="/images/posts/2023-08-06-The-first-blog-production-session/my-resume.png" title="The resume that blogger wrotes" alt="The resume that blogger wrotes" />
</div>

<center>
  <span style="color: #8D4801"><small><b>열심히 작성했던 이력서</b></small></span>
</center>
<p><br /></p>

<hr />

<p>기본적인 base는 footer에 작성되어 있듯이 <span style="color: #8D4801"><strong>Jekyll 테마를 사용했지만, 쉬운 여정은 아니었던  것 같다.</strong></span> 처음의 욕심은 정말 no base로 처음부터 올리고 싶었는데… 욕심에 비해서 아직 가진 게 너무 없다고 판단이 들었다. (곧 Server부터 앞쪽 끝까지 다 해낼 수 있다고 믿는다….) 아무튼 처음에 테마를 고르는데도 한참의 시간이 들었고 고심 끝에 제일 마음에 든다고 생각하는 레이아웃을 Pick하고 clone 받아서 내 블로그에 적용하면 <span style="color: #8D4801"><strong>끝…!</strong></span> 인줄 알았으나… <span style="color: #8D4801"><strong>이제부터 시작</strong></span>이었다.</p>

<div class="image-slider-static">
  <img src="/images/posts/2023-08-06-The-first-blog-production-session/jekyll-themes-web-site.png" title="The web site to offer several themes for Jekyll" alt="The web site to offer several themes for Jekyll" />
</div>

<center>
  <a href="http://jekyllthemes.org" title="Navigate to Jekyll Themes">
    <small><i class="fa fa-copyright" aria-hidden="true"></i> Jekyll Themes</small>
  </a>
</center>
<p><br /></p>

<p>처음에는 그저 블로그 ‘<span style="color: #8D4801"><strong>색상</strong></span>‘만 수정하고 싶었다. (그저 <span style="color: #8D4801"><strong>색상</strong></span>만!!!) 여기서 SCSS라는 개념을 처음 만나고 신세계를 접하는 콜럼버스가 된 것만 같은 기분이었다. 오 이렇게 변수에 색상만 바꿔주면 전체 CSS 색상을 일괄적으로 제어할 수 있다고?!!</p>

<center>
  <img src="/images/posts/2023-08-06-The-first-blog-production-session/discovery.jpg.webp" title="Expression that blogger felts like became columbus discovered the new continent" alt="Expression that blogger felts like became columbus discovered the new continent" />
</center>
<p><br /></p>

<p>근데 이제부터 줄줄이 나온다… <span style="color: #8D4801"><strong>내가 강제로 접해야만 했던 신세계</strong></span>… Jekyll의 Liquid, node.js, npm, 빌드 자동화 도구 gulp, live sass compiler, javascript compressor / beautify, 접근성을 위한 alt 태그 추가, SEO를 위한 image 최적화, markdown 언어 ( 음..? 잠깐만 markdown이면 notion에서 이미 익숙해지ㄴ.. 다르네? vscode snippet에 추가하자….)</p>

<center>
  <img src="/images/posts/2023-08-06-The-first-blog-production-session/confused-confused-math.gif" title="Expression that blogger felts confused" alt="Expression that blogger felts confused" style="width: 40%; height: 40%;" />
</center>
<p><br /></p>

<p>난 그저 <span style="color: #8D4801"><strong>나만의 블로그</strong></span>가 갖고 싶었을 뿐인데! 흠흠… 아무튼 “이것만 고치자… 근데 저것은 왜 저렇지?” 를 십수 번을 반복하며 고생한 끝에서야… 어느정도 내면의 평화가 찾아온 것 같다. 정말 감개가 무량하지 않을 수가 없다. (하지만 이제 겨우 두 번째인걸….) 앞으로 얼마나 성실하게 관리해 나갈 수 있을지 100% 확실하게 얘기할 순 없더라도 이 글이 나태함이 고개를 들 때 항상 돌아보면서 내 자신의 거울이자 <span style="color: #8D4801"><strong>이정표</strong></span>가 되어줄 수 있으면… 하고 기대하고 있다.</p>

<hr />

<h4 id="마무리하며">마무리하며…</h4>
<p>첫 블로그라고 표현했지만, 사실은 온라인상에서 <span style="color: #8D4801"><strong>수많은 나의 영역</strong></span>들이 생겼다가 사라지기를 반복했던 것 같다. 싸이월드가 그러했고 소녀시대가 좋아서 운영했던 그리고 3만 명 사용자 경험을 안겨준 다음, 네이버 팬카페… 그리고 현재까지 이어지고 있는 페이스북, 인스타그램 이제는 깃허브도 포함되려나? 아무튼 많은 곳이 존재하지만 언제나 마음 한편엔 <span style="color: #8D4801"><strong>완전한 내 것이 아니란 갈증</strong></span>이 있었다. 아무래도 상기된 싸이월드 등과 같이 언젠가 갑자기 사라질지도 모른다는 막연한 두려움 때문인 것 같다. 그래서 더더욱 지금의 블로그에 애정이 가고 소중하게 느껴지는지도 모른다. 앞으로 나도 이 블로그도 <span style="color: #8D4801"><strong>소나무처럼 사시사철 변하지 않고 성장</strong></span>해 갔으면 좋겠다.
<br />
<br /></p>

<h2 id="앞으로-잘-부탁한다-블로그야"><center><span style="color: brown"><b>앞으로 잘 부탁한다. 블로그야!</b></span></center></h2>]]></content><author><name></name></author><category term="Daily" /><category term="Impression" /><category term="첫 블로그" /><category term="First blog" /><summary type="html"><![CDATA[문득, 지금 떠오르는 감정을 뭐라고 표현해야 할지 잘 모르겠다. 언제고 나만의 공간을 온라인상에서 갖고 싶었는데 지금까지는 막연하게 생각만 하고 실행은 안 해오던 일상이었다. 무엇이 계기가 되었던 걸까?]]></summary></entry></feed>